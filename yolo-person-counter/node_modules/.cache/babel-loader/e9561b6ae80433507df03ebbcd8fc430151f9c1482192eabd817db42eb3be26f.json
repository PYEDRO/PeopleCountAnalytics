{"ast":null,"code":"var _jsxFileName = \"/home/lapisco/Desktop/pessoal/test_conter/yolo-person-counter/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { Stage, Layer, Line } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [videoFile, setVideoFile] = useState(null);\n  const [videoURL, setVideoURL] = useState(null);\n  const [processedVideo, setProcessedVideo] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [polygons, setPolygons] = useState([]);\n  const [drawing, setDrawing] = useState(false);\n  const [isDrawingStage, setIsDrawingStage] = useState(false);\n  const videoRef = useRef(null);\n  const stageRef = useRef(null);\n  useEffect(() => {\n    if (videoFile) {\n      const url = URL.createObjectURL(videoFile);\n      setVideoURL(url);\n      return () => URL.revokeObjectURL(url);\n    }\n  }, [videoFile]);\n  const handleVideoUpload = event => {\n    setVideoFile(event.target.files[0]);\n    setProcessedVideo(null);\n  };\n  const handleMouseDown = event => {\n    if (isDrawingStage && !drawing) {\n      const {\n        x,\n        y\n      } = event.target.getStage().getPointerPosition();\n      setPolygons([...polygons, [{\n        x,\n        y\n      }]]);\n      setDrawing(true);\n    }\n  };\n  const handleMouseMove = event => {\n    if (isDrawingStage && drawing) {\n      const {\n        x,\n        y\n      } = event.target.getStage().getPointerPosition();\n      const lastPolygon = polygons[polygons.length - 1];\n      lastPolygon.push({\n        x,\n        y\n      });\n      setPolygons(polygons.slice(0, -1).concat([lastPolygon]));\n    }\n  };\n  const handleMouseUp = () => {\n    if (isDrawingStage) {\n      setDrawing(false);\n    }\n  };\n  const handleStartDrawing = () => {\n    setIsDrawingStage(true);\n  };\n  const handleProcessVideo = async () => {\n    if (!videoFile || polygons.length === 0) {\n      alert('Please upload a video and define a polygon.');\n      return;\n    }\n    const polygonData = polygons.map(polygon => polygon.map(point => [point.x, point.y]));\n    const formData = new FormData();\n    formData.append('video', videoFile);\n    formData.append('polygon', JSON.stringify(polygonData));\n    setLoading(true);\n    try {\n      const response = await fetch('http://localhost:8000/analyze', {\n        method: 'POST',\n        body: formData\n      });\n      if (response.ok) {\n        const blob = await response.blob();\n        if (blob.size > 0) {\n          const processedVideoURL = URL.createObjectURL(blob);\n          setProcessedVideo(processedVideoURL);\n        } else {\n          alert('Erro: O vídeo processado está vazio.');\n        }\n      } else {\n        const errorResponse = await response.json();\n        alert(`Failed to process video: ${errorResponse.error}`);\n      }\n    } catch (error) {\n      console.error('Error processing video:', error);\n      alert('Erro ao processar vídeo.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Detec\\xE7\\xE3o de Pessoas com YOLO\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"video/*\",\n      onChange: handleVideoUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), videoURL && /*#__PURE__*/_jsxDEV(\"video\", {\n      src: videoURL,\n      controls: true,\n      ref: videoRef,\n      width: \"600\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartDrawing,\n      children: \"Iniciar Desenho do Pol\\xEDgono\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stage, {\n      ref: stageRef,\n      width: 600,\n      height: 400,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      children: /*#__PURE__*/_jsxDEV(Layer, {\n        children: polygons.map((polygon, index) => /*#__PURE__*/_jsxDEV(Line, {\n          points: polygon.flatMap(({\n            x,\n            y\n          }) => [x, y]),\n          stroke: \"red\",\n          strokeWidth: 2,\n          closed: true\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleProcessVideo,\n      disabled: loading,\n      children: loading ? 'Processando...' : 'Processar Vídeo'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), processedVideo && /*#__PURE__*/_jsxDEV(\"video\", {\n      // Garantindo a atualização correta\n      src: processedVideo,\n      controls: true,\n      width: \"600\"\n    }, processedVideo, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"53Lpuph5kghYxNHu121DEAyff08=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Stage","Layer","Line","jsxDEV","_jsxDEV","App","_s","videoFile","setVideoFile","videoURL","setVideoURL","processedVideo","setProcessedVideo","loading","setLoading","polygons","setPolygons","drawing","setDrawing","isDrawingStage","setIsDrawingStage","videoRef","stageRef","url","URL","createObjectURL","revokeObjectURL","handleVideoUpload","event","target","files","handleMouseDown","x","y","getStage","getPointerPosition","handleMouseMove","lastPolygon","length","push","slice","concat","handleMouseUp","handleStartDrawing","handleProcessVideo","alert","polygonData","map","polygon","point","formData","FormData","append","JSON","stringify","response","fetch","method","body","ok","blob","size","processedVideoURL","errorResponse","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","src","controls","ref","width","onClick","height","onMouseDown","onMouseMove","onMouseUp","index","points","flatMap","stroke","strokeWidth","closed","disabled","_c","$RefreshReg$"],"sources":["/home/lapisco/Desktop/pessoal/test_conter/yolo-person-counter/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { Stage, Layer, Line } from 'react-konva';\n\nfunction App() {\n  const [videoFile, setVideoFile] = useState(null);\n  const [videoURL, setVideoURL] = useState(null);\n  const [processedVideo, setProcessedVideo] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [polygons, setPolygons] = useState([]);\n  const [drawing, setDrawing] = useState(false);\n  const [isDrawingStage, setIsDrawingStage] = useState(false);\n  const videoRef = useRef(null);\n  const stageRef = useRef(null);\n\n  useEffect(() => {\n    if (videoFile) {\n      const url = URL.createObjectURL(videoFile);\n      setVideoURL(url);\n      return () => URL.revokeObjectURL(url);\n    }\n  }, [videoFile]);\n\n  const handleVideoUpload = (event) => {\n    setVideoFile(event.target.files[0]);\n    setProcessedVideo(null);\n  };\n\n  const handleMouseDown = (event) => {\n    if (isDrawingStage && !drawing) {\n      const { x, y } = event.target.getStage().getPointerPosition();\n      setPolygons([...polygons, [{ x, y }]]);\n      setDrawing(true);\n    }\n  };\n\n  const handleMouseMove = (event) => {\n    if (isDrawingStage && drawing) {\n      const { x, y } = event.target.getStage().getPointerPosition();\n      const lastPolygon = polygons[polygons.length - 1];\n      lastPolygon.push({ x, y });\n      setPolygons(polygons.slice(0, -1).concat([lastPolygon]));\n    }\n  };\n\n  const handleMouseUp = () => {\n    if (isDrawingStage) {\n      setDrawing(false);\n    }\n  };\n\n  const handleStartDrawing = () => {\n    setIsDrawingStage(true);\n  };\n\n  const handleProcessVideo = async () => {\n    if (!videoFile || polygons.length === 0) {\n      alert('Please upload a video and define a polygon.');\n      return;\n    }\n\n    const polygonData = polygons.map((polygon) =>\n      polygon.map((point) => [point.x, point.y])\n    );\n\n    const formData = new FormData();\n    formData.append('video', videoFile);\n    formData.append('polygon', JSON.stringify(polygonData));\n\n    setLoading(true);\n\n    try {\n      const response = await fetch('http://localhost:8000/analyze', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (response.ok) {\n        const blob = await response.blob();\n        if (blob.size > 0) {\n          const processedVideoURL = URL.createObjectURL(blob);\n          setProcessedVideo(processedVideoURL);\n        } else {\n          alert('Erro: O vídeo processado está vazio.');\n        }\n      } else {\n        const errorResponse = await response.json();\n        alert(`Failed to process video: ${errorResponse.error}`);\n      }\n    } catch (error) {\n      console.error('Error processing video:', error);\n      alert('Erro ao processar vídeo.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Detecção de Pessoas com YOLO</h1>\n      <input type=\"file\" accept=\"video/*\" onChange={handleVideoUpload} />\n      {videoURL && <video src={videoURL} controls ref={videoRef} width=\"600\" />}\n      <button onClick={handleStartDrawing}>Iniciar Desenho do Polígono</button>\n      <Stage\n        ref={stageRef}\n        width={600}\n        height={400}\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n      >\n        <Layer>\n          {polygons.map((polygon, index) => (\n            <Line\n              key={index}\n              points={polygon.flatMap(({ x, y }) => [x, y])}\n              stroke=\"red\"\n              strokeWidth={2}\n              closed\n            />\n          ))}\n        </Layer>\n      </Stage>\n      <button onClick={handleProcessVideo} disabled={loading}>\n        {loading ? 'Processando...' : 'Processar Vídeo'}\n      </button>\n      {processedVideo && (\n        <video\n          key={processedVideo} // Garantindo a atualização correta\n          src={processedVideo}\n          controls\n          width=\"600\"\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}